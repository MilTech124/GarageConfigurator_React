/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import Materials from "./Materials";


export function Model(props) {
  const {
    color,
    direction,
    width,
    depth,
    height,
    emboss,
    roof,
    roofColor,
    roofType,
    gateEmbose,
    gateDirection,
    gateCount,
    gateType1,
    gateColor1,
    gateWidth1,
    gateHeight1,
    gatePositionValue1,
    gateType2,
    gateColor2,
    gateWidth2,
    gateHeight2,
    gatePositionValue2,
    gateType3,
    gateColor3,
    gateWidth3,
    gateHeight3,
    gatePositionValue3,
    door,
    window,
    carport,
    carportWidth,
    carportSide,
    carportSides,
    carportType
  } = props.selectedOptions;

  const { nodes, materials } = useGLTF("/model/garaz.glb");
  const {
    roofMaterial,
    wallMaterial,
    gateMaterial1,
    gateMaterial3,
    gateMaterial2,
    doorMaterial1,
    doorMaterial2,
    doorMaterial3,
    doorMaterial4,
    doorMaterial5,
    azuryMaterial
  } = Materials(props.selectedOptions);

  const Gate = ({ gateMaterial, position, scale, type }) => {
    return (
      <>      
        <group position={position} scale={scale}>
          <mesh
            geometry={nodes.brama.geometry}
            material={gateMaterial}
            position={[(3.004 * depth) / 6, 1.033, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1.4]} //5
          />
          <mesh
            geometry={nodes["obramowka-drzwi001"].geometry}
            material={materials.czarna}
            position={[(3.001 * depth) / 6, 1.053, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1.02, 1.054, 1.45]} //55
          />
          <mesh
            name="przedziałka"
            visible={type === "dwuskrzydłowa"}
            geometry={nodes.przedziałka.geometry}
            material={materials.czarna}
            position={[(3.2 * depth) / 6, 1.033, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1.02, 1.054, 0.023]}
          />
          <group>
            <mesh
              name="drzwi-klamka"
              visible={type === "dwuskrzydłowa"}
              geometry={nodes["drzwi-klamka"].geometry}
              material={materials.czarna}
              position={[(3.05 * depth) / 6, 1.035, -0.1]}
              scale={[0.025, 0.02, 0.025]}
            />
          </group>

          <mesh
            visible={type === "uchylna"}
            geometry={nodes["brama-klamka"].geometry}
            material={materials.czarna}
            position={[(3.013 * depth) / 6, 1.032, 0.002]}
            scale={[0.017, 0.021, 0.017]}
          />
        </group>
      </>
    );
  };

  const Door = ({ number }) => {
    if (!number || number === undefined) {
      number = 0;
    }
    const doorMaterials = [
      doorMaterial1,
      doorMaterial2,
      doorMaterial3,
      doorMaterial4,
      doorMaterial5,
    ]; // Array
    const selectedDoorMaterial = doorMaterials[number];
    return (
      <group
        name="drzwi-cale"
        position={
          door[number].position === "przod"
            ? [
                (2.965 * depth) / 6,
                1.054,
                width < 5
                  ? (2.82 * width) / 6 - door[number].positionValue / 100
                  : (2.92 * width) / 6 - door[number].positionValue / 100,
              ]
            : door[number].position === "tył"
            ? [
                (-2.965 * depth) / 6,
                1.054,
                ((-2.2 - 0.71) * width) / 6 + door[number].positionValue / 100,
              ]
            : door[number].position === "prawo"
            ? [
                (2.86 * depth) / 6 - door[number].positionValue / 100,
                1.054,
                (-2.965 * width) / 6,
              ]
            : door[number].position === "lewo"
            ? [
                (2.86 * depth) / 6 -
                  door[number].positionValue / 100 -
                  (0.6 * width) / 6,
                1.054,
                (2.965 * width) / 6,
              ]
            : null
        }
        rotation={[
          0,
          door[number].position === "przod"
            ? 0
            : door[number].position === "tył"
            ? Math.PI
            : door[number].position === "prawo"
            ? Math.PI / 2
            : door[number].position === "lewo"
            ? -Math.PI / 2
            : null,
          0,
        ]}
        scale={[
          1,
          1,
          door[number].size === "100x190"
            ? 1
            : door[number].size === "90x190"
            ? 0.95
            : door[number].size === "80x190"
            ? 0.92
            : null,
        ]}
      >
        <mesh
          name="drzwi-klamka"
          geometry={nodes["drzwi-klamka"].geometry}
          material={materials.czarna}
          position={
            door[number].type === "lewe" ? [0.1, 0.014, 0] : [0.1, 0.014, -0.7]
          }
          rotation={[door[number].type === "lewe" ? 0 : Math.PI / 1, 0, 0]}
          scale={[0.025, 0.02, 0.025]}
        />

        <mesh
          name="drzwi"
          geometry={nodes.drzwi.geometry}
          material={selectedDoorMaterial}
          position={[0, 0, -0.362]}
          scale={[0.05, 1.021, 0.5]}
        />
        <mesh
          name="drzwi-obramowka"
          geometry={nodes["drzwi-obramowka"].geometry}
          material={materials.czarna}
          position={[0.025, 0, -0.362]}
          scale={[0.05, 1.021, 0.5]}
        />
      </group>
    );
  };

  const Carport = () => {      //DWUSPAD + DWUSPAD PRZOD-TYL + PODOPRY + OBLACHOWANIE
    const x = 1.5;

    return (
      <group                     
        visible={carport && (roof === "dwuspad" || roof === "dwuspad przod-tył")}       
        rotation={
          carportSide === "lewo" && roof === "dwuspad"
            ? [0, 0, 0]
            : carportSide === "prawo" && roof === "dwuspad"
            ? [0, -Math.PI / 1, 0]
            : carportSide === "tyl" && roof === "dwuspad przod-tył"
            ? [0, -Math.PI / 2, 0]
            : carportSide === "przod" && roof === "dwuspad przod-tył"
            ? [0, Math.PI / 2, 0]
            : [0, 0, 0]
        }
        position={[0, 0, 0]}        
        scale={
          roof === "dwuspad" && (carportSide === "lewo" ^
          carportSide === "prawo")
            ? [
                (1 * depth) / 6,
                (1.115 * height) / 213,
                (0.8 * width) / 6 + carportWidth * 0.15,
              ]
            : roof === "dwuspad przod-tył" && (carportSide === "przod" ^ carportSide === "tyl")
            ? [
                (1 * width) / 6,
                (1.115 * height) / 213,
                (0.8 * depth) / 6 + carportWidth * 0.15,
              ]
            : roof === "dwuspad przod-tył" &&
              (carportSide === "lewo" ^ carportSide === "prawo")
            ? [(1 * depth) / 6, (1.115 * height) / 213, (1 * width) / 6 +carportWidth * 0.25] 
            : [1, (1.115 * height) / 213, 1]
        }
      >
        <group   
          name="podpory"
          position={[
            carportSide === "przod" && roof === "dwuspad"
              ? (-0.3 * width / 6) + carportWidth * 0.9
              : carportSide === "tyl" && roof === "dwuspad"
              ? (0.3 * width / 6) - carportWidth * 0.9
              : 0,
            0,
            (carportSide === "przod" ^ carportSide === "tyl") &&
            roof === "dwuspad"
              ? 0
              : carportSide === "lewo" && roof === "dwuspad przod-tył"
              ? (0)  
              : carportSide === "prawo" && roof === "dwuspad przod-tył"
              ? 0
              : 0 + x,
          ]}
          rotation={
            carportSide === "przod" && roof === "dwuspad"
              ? [0, Math.PI / 2, 0]
              : carportSide === "tyl" && roof === "dwuspad"
              ? [0, -Math.PI / 2, 0]
              : [0, 0, 0]
          }
          scale={[
            (carportSide === "przod" ^ carportSide === "tyl") &&
            roof === "dwuspad"
              ? (1 * width / 6)              
              : 1,
            1,
            (carportSide === "przod" ^ carportSide === "tyl") &&
            roof === "dwuspad"
              ? (1 * depth/6)
              :carportSide === "lewo" && roof === "dwuspad przod-tył"
              ? (1 * width) / 6 
              :carportSide === "prawo" && roof === "dwuspad przod-tył"
              ? -(1 * width) / 6         
              : 1,
          ]}          
        >
          <mesh
            name="podpora-przod"
            geometry={nodes["podpora-przod"].geometry}
            material={nodes["podpora-przod"].material}
            position={[2.8, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />
          <mesh
            name="podpora-srodek"
            geometry={nodes["podpora-srodek"].geometry}
            material={nodes["podpora-srodek"].material}
            position={[0.014, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />
          <mesh
            name="podpora-tyl"
            geometry={nodes["podpora-tyl"].geometry}
            material={nodes["podpora-tyl"].material}
            position={[-2.958, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />

                                                 {/* //oblachowanie */}
           <group             
              name="wiata-blacha-spady-boczne"
              position={[0, 0, -1.7]}
              visible ={carportType==="oblachowane" || carportType==="azury"}
            >
              <mesh
                visible= { (carportSide==="lewo" || carportSide==="prawo") && (carportSides.lewo || carportSides.prawo) ? true
                  : (carportSide==="przod" || carportSide==="tyl") && (carportSides.przod || carportSides.tyl) ? true:
                  false}
                castShadow
                receiveShadow
                geometry={nodes['wiata-blacha-bok'].geometry}
                material={azuryMaterial}
                position={[0, 1.06, 4.739]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[3, 1, 1.06]}
              />
              <mesh                                                       //PRZOD BLACHA + korekcja carport slides na dole
              visible= {carportSide==="lewo" | carportSide==="prawo" ? carportSides.przod : carportSide==="przod" && carportSides.prawo ? true : carportSide==="tyl" && carportSides.lewo ? true :false}
                castShadow
                receiveShadow
                geometry={nodes['wiata-blacha-tyl'].geometry}
                material={azuryMaterial}
                position={carportSide==="lewo" ? [2.99, 1.064, 3.001]:carportSide==="prawo" ? [-2.99, 1.064, 3.001]:[2.99, 1.064, 3.001]}   //LEWO PRAWO ,POZYCJA PRZOD BLACHA
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                scale={[1.761, 1.57, 1.062]}
              />
              <mesh                                                       //TYL BLACHA    + korekcja carport slides na dole
              visible= {carportSide==="lewo" | carportSide==="prawo" ? carportSides.tyl : carportSide==="przod" && carportSides.lewo ? true : carportSide==="tyl" && carportSides.prawo ? true  :false}
              name="wiata-blacha-przod"
                castShadow
                receiveShadow
                geometry={nodes['wiata-blacha-tyl'].geometry}
                material={azuryMaterial}
                position={carportSide==="lewo" ? [-2.99, 1.064, 3.001]:carportSide==="prawo" ? [2.99, 1.064, 3.001]:[-2.99, 1.064, 3.001]}        //PRAWO LEWO ,POZYCJA TYL BLACHA
                rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                scale={[1.761, 1.57, 1.062]}
              />
            </group>
        </group>
        <group
          visible={
            !(
              ((carportSide === "przod") ^ (carportSide === "tyl") &&
                roof === "dwuspad") ||
              (roof === "dwuspad przod-tył" &&
                (carportSide === "lewo") ^ (carportSide === "prawo"))
            )
          }
          scale={[1, 1, 1 * x]}
          rotation={[0, 0, 0]}
        >
          <mesh
            name="dach-lewy"
            geometry={nodes["dach-lewy"].geometry}
            material={roofMaterial}
            position={[0, 2.641, 1.591]}
            rotation={[Math.PI / 9, 0, 0]}
            scale={[3.131, 1.137, 1.729]}
          />
          <mesh
            name="dach_-przod-wiata"
            geometry={nodes["dach_-przod-wiata"].geometry}
            material={wallMaterial}
            position={[3, 2.571, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1]}
          />
          <mesh
            name="dach_-tyl-wiata"
            geometry={nodes["dach_-tyl-wiata"].geometry}
            material={wallMaterial}
            position={[-3, 2.571, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1]}
          />
        </group>
      </group>
    );
  };

  const CarportDirectionMetal = () =>{  
    return(
      <group visible={carportType==="oblachowane"||carportType==="azury"}>
        <group name="wiata-spad-bok-lewy" 
          position={
            [0,0,-1.7+carportWidth]
            }
          scale={[0.99,1*(height/213),1]} 
          visible={carportSide==="lewo"}
          >
            <mesh
              visible= {carportSides.lewo||carportSides.prawo}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-bok'].geometry}
              material={azuryMaterial}
              position={ [0, 1.131, 1.751] }
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.tyl}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-tyl'].geometry}
              material={azuryMaterial}
              position={[0, 1.131, 1.751]}
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.przod}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-przod'].geometry}
              material={azuryMaterial}
              position={[0.024, 1.131, 1.755]}
              scale={[3, 1.102, 2.994]}
            />
        </group> 
        <group name="wiata-spad-bok-prawy" 
          position={
            [0,0,1.7-carportWidth]
            }
          scale={[0.99,1*(height/213),-1]} 
          visible={carportSide==="prawo"}
          
          >
            <mesh
              visible= {carportSides.lewo||carportSides.prawo}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-bok'].geometry}
              material={azuryMaterial}
              position={ [0, 1.131, 1.751] }
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.tyl}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-tyl'].geometry}
              material={azuryMaterial}
              position={[0, 1.131, 1.751]}
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.przod}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-przod'].geometry}
              material={azuryMaterial}
              position={[0.024, 1.131, 1.755]}
              scale={[3, 1.102, 2.994]}
            />
        </group> 
        <group name="wiata-spad-bok-tyl-przod" 
          position={
            carportSide==="tyl" ?[0-carportWidth,0,1.78] : carportSide==="przod" ?[0+carportWidth,0,1.78]:null
            
            }
          scale={carportSide==="tyl" ?[1.01,1*(height/213)-(carportWidth)*0.04,-1] : carportSide==="przod" ?[1.01,1*(height/213)+(carportWidth)*0.035,-1]:null}    //skalowanie wysokosci w zaleznosci od szerokosci carportu
          visible={carportSide==="tyl" || carportSide==="przod"}
          
          >
            <mesh
              visible= {carportSides.prawo}
              name=""
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-bok'].geometry}
              material={azuryMaterial}
              position={ [0, 1.131, 1.751] }
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.lewo}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-bok'].geometry}
              material={azuryMaterial}
              position={ [0, 1.131, -4.2] }
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.tyl}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-tyl'].geometry}
              material={azuryMaterial}
              position={[0, 1.131, 1.751]}
              scale={[3, 1.102, 2.994]}
            />
            <mesh
              visible= {carportSides.przod}
              castShadow
              receiveShadow
              geometry={nodes['wiata-spad-przod'].geometry}
              material={azuryMaterial}
              position={[0.024, 1.131, 1.755]}
              scale={[3, 1.102, 2.994]}
            />
        </group> 
      </group>
    )
  }

 
  const Window = ({ number }) => {
    if (!number || number === undefined) {
      number = 0;
    }
    return (
      <group
        name="okno"
        position={
          window[number].position === "przod"
            ? [
                (3.006 * depth) / 6,
                1.631,
                width >= 6
                  ? (2.7 * width) / 6 - window[number].positionValue / 100
                  : (2 * width) / 6 - window[number].positionValue / 100,
              ]
            : window[number].position === "tył"
            ? [
                (-3.006 * depth) / 6,
                1.631,
                width >= 6
                  ? (2.7 * width) / 6 - window[number].positionValue / 100
                  : (2 * width) / 6 - window[number].positionValue / 100,
              ]
            : window[number].position === "lewo"
            ? [
                depth <= 6
                  ? (-2.4 * depth) / 6 + window[number].positionValue / 100
                  : (-2.7 * depth) / 6 + window[number].positionValue / 100,
                1.631,
                (3 * width) / 6,
              ]
            : window[number].position === "prawo"
            ? [
                depth <= 6
                  ? (-2.4 * depth) / 6 + window[number].positionValue / 100
                  : (-2.7 * depth) / 6 + window[number].positionValue / 100,
                1.631,
                (-3 * width) / 6,
              ]
            : null
        }
        rotation={
          window[number].position === "przod"
            ? [0, 0, 0]
            : window[number].position === "tył"
            ? [0, Math.PI / 1, 0]
            : window[number].position === "lewo"
            ? [0, -Math.PI / 2, 0]
            : window[number].position === "prawo"
            ? [0, -Math.PI / -2, 0]
            : [0, 0, 0]
        }
        scale={[0.02, 0.3, 0.4]}
      >
        <mesh
          name="Cube002"
          geometry={nodes.Cube002.geometry}
          material={materials.czarna}
        />
        <mesh
          name="Cube002_1"
          geometry={nodes.Cube002_1.geometry}
          material={materials["Material.004"]}
        />
      </group>
    );
  };

  const Roof = () => {
    const carportDouble = () => {
      if (carportSide === "przod" && roof === "dwuspad" && carport) {
        return carportWidth * 0.14;
      }
      if (carportSide === "tyl" && roof === "dwuspad" && carport) {
        return carportWidth * 0.14;
      }
      if (carportSide === "lewo" && roof === "dwuspad przod-tył" && carport) {
        return carportWidth * 0.14;
      }
      if (carportSide === "prawo" && roof === "dwuspad przod-tył" && carport) {
        return carportWidth * 0.14;
      }
      return 0;
    };

    return (
      <group
        visible={roof === "dwuspad" || roof === "dwuspad przod-tył"}
        scale={
          roof === "dwuspad"
            ? [
                1 * (depth / 6) + carportDouble(),
                (1.12 * height) / 213,
                1 * (width / 6),
              ]
            : roof === "dwuspad przod-tył"
            ? [
                1 * (width / 6) + carportDouble(),
                (1.12 * height) / 213,
                1 * (depth / 6),
              ]
            : null
        }
        position={[
          carportSide === "przod" && roof === "dwuspad"
            ? 0 + carportDouble() * 3
            : carportSide === "tyl" && roof === "dwuspad"
            ? 0 - carportDouble() * 3
            : carportSide === "lewo" && roof === "dwuspad przod-tył"
            ? 0
            : carportSide === "prawo" && roof === "dwuspad przod-tył"
            ? 0
            : 0,
          0,
          carportSide === "lewo" && roof === "dwuspad przod-tył"
            ? 0 + carportDouble() * 3
            : carportSide === "prawo" && roof === "dwuspad przod-tył"
            ? 0 - carportDouble() * 3
            : 0,
        ]}
        rotation={
          roof === "dwuspad przod-tył"
            ? [0, -Math.PI / 2, 0]
            : roof === "dwuspad"
            ? [0, -Math.PI / 1, 0]
            : null
        }
      >
        <mesh
          name="dach-prawy"
          visible={
            !(carportSide === "prawo" && roof === "dwuspad") ^
              (carportSide === "tyl" && roof === "dwuspad przod-tył") ||
            !carport
          }
          geometry={nodes["dach-lewy"].geometry}
          material={roofMaterial}
          position={[0, 2.641, 1.591]}
          rotation={[Math.PI / 9, 0, 0]}
          scale={[3.131, 1.137, 1.729]}
        />
        <mesh
          visible={
            !(carportSide === "lewo" && roof === "dwuspad") ^
              (carportSide === "przod" && roof === "dwuspad przod-tył") ||
            !carport
          }
          name="dach-lewy"
          geometry={nodes["dach-prawy"].geometry}
          material={roofMaterial}
          position={[0, 2.628, -1.618]}
          rotation={[-Math.PI / 9, 0, 0]}
          scale={[3.131, 1.137, 1.729]}
        />
        <mesh
          name="dach-tyl"
          geometry={nodes["dach-tyl"].geometry}
          material={wallMaterial}
          position={[-3.01, 2.571, 0]}
          rotation={[0, 0, -Math.PI / 2]}
        />
         <mesh
          name="dach-tyl"
          geometry={nodes["dach-tyl"].geometry}
          material={wallMaterial}
          position={[3.01, 2.571, 0]}
          rotation={[0, -Math.PI / 1, -Math.PI / 2]}
        />
        {/* <mesh
          name="dach-przod"
          geometry={nodes["dach-przod"].geometry}
          material={wallMaterial}
          position={[3, 2.571, 0]}
          rotation={[0, 0, -Math.PI / 2]}
        /> */}
      </group>
    );
  };

  const RoofDirection = () => (
    <group
      scale={
        roof === "spad tył"
          ? [(1 * depth) / 6, (1 * height) / 213, (1 * width) / 6]
          : roof === "spad przód"
          ? [(1 * depth) / 6, (1 * height) / 213, (1 * width) / 6]
          : roof === "spad w prawo"
          ? [(1 * width) / 6, (1 * height) / 213, (1 * depth) / 6]
          : roof === "spad w lewo"
          ? [(1 * width) / 6, (1 * height) / 213, (1 * depth) / 6]
          : null
      }
      rotation={
        roof === "spad tył"
          ? [0, 0, 0]
          : roof === "spad przód"
          ? [0, Math.PI, 0]
          : roof === "spad w prawo"
          ? [0, -Math.PI / 2, 0]
          : roof === "spad w lewo"
          ? [0, Math.PI / 2, 0]
          : null
      }     
      
    >
      <mesh
        name="bryla"
        geometry={nodes.bryla.geometry}
        material={wallMaterial}
        position={[0, 1.131, 0.006]}
        scale={[3, 1.102, 2.994]}
      />
      <mesh 
        name="spadtyl"
        geometry={nodes.spadtyl.geometry}
        material={roofMaterial}        
        position={[
          carport && carportSide==="tyl" ? 0-carportWidth/2 
          : carportSide==="przod" ? 0+carportWidth/2 
           :0    
        , carport && carportSide==="tyl" ? 2.427 - carportWidth/2 * 0.08      //HEIGHT
          : carportSide==="przod" ? 2.427 - carportWidth/2 * -0.08            //HEIGHT
         : 2.427,   //HEIGHT
          carport && carportSide==="lewo" ? -0.006+carportWidth/2  
          : carportSide==="prawo" ? -0.006-carportWidth/2 : -0.006
          ]}        
        rotation={[0, 0, 0.087]}
        scale={[ carport && carportSide==="tyl" ? 3.131 + carportWidth/2 
        : carportSide==="przod" ? 3.131 + carportWidth/2
        :3.131 
        , 1.137, //HEIGHT
          carport && carportSide==="lewo" ? 3.1+carportWidth/2 //SPAD LEWO
          : carportSide==="prawo" ? 3.1+carportWidth/2 : 3.1]  //SPAD PRAWO
          }    
      />
            
       {carport ?<CarportDirectionMetal/> :null} 
            
   

      {/* //PODPORY DLA TYL I PRZOD START  */}
      <group   
       visible={carport && (carportSide === "przod"^carportSide === "tyl")}
          name="podpory tyl"
          rotation={
            carportSide==="przod" ? [0, Math.PI/2, 0]
            : carportSide==="tyl" ? [0, -Math.PI/2, 0]
            :null
            }

          position={
            carportSide==="przod" ? [0+carportWidth,0,0]
            : carportSide==="tyl" ? [0-carportWidth,0,0]
            : null
          }
          scale={
            carportSide==="przod" ? [0.97,1.0+(carportWidth*0.03),1 ]
            : carportSide==="tyl" ? [0.99,0.8-(carportWidth*0.03),1 ]
            : null
            
          }
        >
          <mesh
            name="podpora-przod"
            geometry={nodes["podpora-przod"].geometry}
            material={nodes["podpora-przod"].material}
            position={[3.011, 1.25*height/200, 3]}
            scale={[0.025, 1.25*height/200, 0.025]}
          />
          <mesh
            name="podpora-srodek"
            geometry={nodes["podpora-srodek"].geometry}
            material={nodes["podpora-srodek"].material}
            position={[0.014, 1.25*height/200,  3]}
            scale={[0.025, 1.25*height/200, 0.025]}
          />
          <mesh
            name="podpora-tyl"
            geometry={nodes["podpora-tyl"].geometry}
            material={nodes["podpora-tyl"].material}
            position={[-2.958,1.25*height/200, 3]}
            scale={[.025, 1.25*height/200, 0.025]}
          />
          
      </group>
      {/* //PODPORY DLA TYL I PRZOD END  */}
           {/* //PODPORY DLA Lewo Prawo  */}
      <group   
       visible={carport && carportSide === "lewo"^carportSide === "prawo" ||false }
          name="podpory2"
          position={[
            0,0,0
          ]
          }
          scale={[
          0.98,1,1
          ]}
        >
          <mesh
            name="podpora-przod"
            geometry={nodes["podpora-przod"].geometry}
            material={nodes["podpora-przod"].material}
            position={[3.011, 1.35,carportSide==="lewo"? 3+carportWidth :carportSide==="prawo" ? -3-carportWidth : 3]}
            scale={[0.025, 1.35, 0.025]}
          />
          <mesh
            name="podpora-srodek"
            geometry={nodes["podpora-srodek"].geometry}
            material={nodes["podpora-srodek"].material}
            position={[0.014, 1.2, carportSide==="lewo"? 3+carportWidth :carportSide==="prawo" ? -3-carportWidth : 3]}
            scale={[0.025, 1.2, 0.025]}
          />
          <mesh
            name="podpora-tyl"
            geometry={nodes["podpora-tyl"].geometry}
            material={nodes["podpora-tyl"].material}
            position={[-2.958, 1.069, carportSide==="lewo"? 3+carportWidth :carportSide==="prawo" ? -3-carportWidth : 3]}
            scale={[0.025, 1.064, 0.025]}
          />
        </group>
         {/* //PODPORY DLA Lewo Prawo  */}
    </group>
  );

  return (
    <group {...props} dispose={null} position={[0, -0.5, 0]}>
      {[...Array(gateCount)].map((_, index) => {
        let gateMaterial, position, scale, type;
        if (index === 0) {
          gateMaterial = gateMaterial1;
          position = [
            0,
            0,
            (width - gateWidth1) * 0.5 - gatePositionValue1 / 100,
          ];
          scale = [1, gateHeight1 / 190, gateWidth1 / 3];
          type = gateType1;
        } else if (index === 1) {
          gateMaterial = gateMaterial2;
          position = [
            0,
            0,
            (width - gateWidth2) * 0.5 - gatePositionValue2 / 100,
          ];
          scale = [1, gateHeight2 / 190, gateWidth2 / 3];
          type = gateType2;
        } else if (index === 2) {
          gateMaterial = gateMaterial3;
          position = [
            0,
            0,
            (width - gateWidth3) * 0.5 - gatePositionValue3 / 100,
          ];
          type = gateType3;
          scale = [1, gateHeight3 / 190, gateWidth3 / 3];
        }
        return (
          <Gate
            key={index}
            gateMaterial={gateMaterial}
            position={position}
            scale={scale}
            type={type}
          />
        );
      })}

      {door.map((item, index) => (
        <Door number={index} key={index} />
      ))}
      {window.map((item, index) => (
        <Window number={index} key={index} />
      ))}

      <Roof />
      {carport && <Carport /> }

      <RoofDirection />
      <mesh
        name="calosc"
        visible={roof === "dwuspad" || roof === "dwuspad przod-tył"}
        geometry={nodes.calosc.geometry}
        material={wallMaterial}
        position={[0, (1.2 * height) / 213, 0]}
        scale={[3 * (depth / 6), 1.2 * (height / 213), 3 * (width / 6)]}
      />
          <mesh
        castShadow
        receiveShadow
        geometry={nodes.fundament.geometry}
        material={nodes.fundament.material}
        position={[0.012, 0.086, -0.006]}
        scale={[3.2*(depth/6), 3.121, 3.2*(width/6)]}
      />
       <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
        position={[-1.219, 0.016, -0.653]}
        scale={[10.994, 1, 11.044]}
      />

      
     
      

      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes['wiata-kwadrat'].geometry}
        material={wallMaterial}
        position={[0.01, 1.079, 1.742]}
        scale={[3, 1.05, 3]}        
      /> */}

      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes['wiata-boczna'].geometry}
        material={wallMaterial}
        position={[0.01, 1.131, 1.751]}
        scale={[3, 1.102, 2.994]}
      /> */}
    </group>
  );
}

useGLTF.preload("/model/garaz.glb");


  